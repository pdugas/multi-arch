name: Build

on:
  push:
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

defaults:
  run:
    shell: bash

jobs:
  builders:
    name: Update Builder
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu,alpine]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get Tag
        id: tag
        run: |
          if [ "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              TAG=${{ steps.version.outputs.version-without-v }}
              echo "::set-output name=latest::true"
              echo "::set-output name=push::true"
          else
            if [ "refs/heads/main" = "${GITHUB_REF}" ]; then
              TAG=next
              echo "::set-output name=push::true"
            else
              TAG=unreleased
            fi
          fi
          echo "::set-output name=tag::${TAG}"

      - name: Create Release
        id: release
        if: ${{ steps.version.outputs.is-semver == 'true' }}
        run: |
            if [ -n "${{ steps.version.outputs.prerelease }}" ]; then
              gh release create ${{ steps.get_version.outputs.version }} -p \
                -t "Pre-Release ${{ steps.version.outputs.version-without-v }}"
            else
              gh release create ${{ steps.get_version.outputs.version }} \
                -t "Release ${{ steps.version.outputs.version-without-v }}"
            fi

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Builder Image
        run: make builder-os OS=${{ matrix.os }} BUILDER=${{ steps.buildx.outputs.name }} PUSH=${{ steps.tag.outputs.push }}

    outputs:
        tag: ${{ steps.tag.outputs.tag }}
        latest: ${{ steps.tag.outputs.latest }}
        push: ${{ steps.tag.outputs.push }}

  build:
    name: Build & Test
    needs: builders
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu,alpine]
        arch: [amd64,arm64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build & Test
        run: make build-os-arch OS=${{ matrix.os }} ARCH=${{ matrix.arch }} VERSION=${{ needs.builders.outputs.tag }}

      - name: Add Asset to Release
        id: release
        if: ${{ steps.version.outputs.is-semver == 'true' }}
        run: |
            gh release upload ${{ steps.get_version.outputs.version }} 

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries ${{ matrix.os }} ${{ matrix.arch }}
          path: bin/eg-*

  image:
    name: Build Image
    needs: [builders,build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu,alpine]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download amd64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries ${{ matrix.os }} amd64
          path: bin

      - name: Download arm64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries ${{ matrix.os }} arm64
          path: bin

      - name: Build Container Image
        run: make image-os OS=${{ matrix.os }} BUILDER=${{ steps.buildx.outputs.name }} VERSION=${{ needs.builders.outputs.tag }} LATEST=${{ needs.builders.outputs.latest }} PUSH=${{ needs.builders.outputs.push }}


