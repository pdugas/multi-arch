name: Build
on:
  push:
  pull_request:
    branches:
      - 'main'
      - 'release/*'

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
        REGISTRY: ghcr.io
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Tag Info
        run: git fetch --prune --unshallow

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Test
        run: make

      - name: Build Container Image
        run: |
          set -x
          DEFAULT=main
          PUSH_OPT=--push
          if egrep -i "^refs/tags/v[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}-rc[0-9]{1,}$" <<<$GITHUB_REF >/dev/null; then
            VERSION=${GITHUB_REF##*/v}
          elif egrep -i "^refs/tags/v[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}$" <<<$GITHUB_REF >/dev/null; then
            TAG=${GITHUB_REF##*/v}
            LATEST=1
          elif egrep -i "^refs/heads/${DEFAULT}$" <<<$GITHUB_REF >/dev/null; then
            VERSION=next
          else
            VERSION=unreleased
            PUSH_OPT=
          fi
          VERSION=${VERSION,,} # lowercase
          TAG=${{env.REGISTRY}}/${{github.repository}}
          [ -z "${LATEST}" ] || TAG_OPT="--tag ${TAG}:latest"
          docker buildx build \
            --tag ${TAG}:${VERSION}-ubuntu \
            ${PUSH_OPT} ${TAG_OPT} \
            --platform linux/amd64,linux/arm64 \
            --output type=image \
            --build-arg IMAGE=ubuntu:latest \
            --build-arg LIBC=gnu \
            --file .docker/Dockerfile.publish \
            .
          docker buildx build \
            --tag ${TAG}:${VERSION}-alpine \
            ${PUSH_OPT} ${TAG_OPT} \
            --platform linux/amd64,linux/arm64 \
            --output type=image \
            --build-arg IMAGE=alpine:latest \
            --build-arg LIBC=musl \
            --file .docker/Dockerfile.publish \
            .

