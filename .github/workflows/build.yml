name: Build
on:
  push:
  pull_request:
    branches:
      - 'main'

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
        REGISTRY: ghcr.io
        PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get Tag
        id: tag
        run: |
          if [ "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              TAG=${{ steps.version.outputs.version-without-v }}
              echo "::set-output name=latest::true"
          else
            if [ "refs/heads/main" = "${GITHUB_REF}" ]; then
              TAG=next
            else
              TAG=unreleased
            fi
          fi
          echo "::set-output name=tag::${TAG}"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Builder Images
        run: |
          TAG=${{env.REGISTRY}}/${{github.repository}}-builder

          echo "::group::Building ${TAG}:ubuntu Image"
          docker pull ${TAG}:ubuntu || true
          docker buildx build \
            --push \
            --tag ${TAG}:ubuntu \
            --cache-from ${TAG}:ubuntu \
            --platform ${{env.PLATFORMS}} \
            --output type=image \
            --file .docker/Dockerfile.ubuntu \
            .
          echo "::endgroup::"

          echo "::group::Building ${TAG}:alpine Image"
          docker pull ${TAG}:alpine || true
          docker buildx build \
            --push \
            --tag ${TAG}:alpine \
            --cache-from ${TAG}:alpine \
            --platform ${{env.PLATFORMS}} \
            --output type=image \
            --file .docker/Dockerfile.alpine \
            .
          echo "::endgroup::"

      - name: Build & Test
        run: make VERSION=${{ steps.tag.outputs.tag }}

      - name: Build Container Image
        run: |
          VERSION=${{ steps.tag.outputs.tag }}
          if [ "unreleased" = "${VERSION}" ]; then
            PUSH_OPT=
          else 
            PUSH_OPT=--push
          fi
          TAG=${{env.REGISTRY}}/${{github.repository}}
          [ -z "${{ steps.tag.outputs.latest }}" ] || TAG_OPT="--tag ${TAG}:latest"
          echo "::group::Building ${TAG}:${VERSION}-ubuntu Image"
          docker buildx build \
            --tag ${TAG}:${VERSION}-ubuntu \
            ${PUSH_OPT} ${TAG_OPT} \
            --platform ${{env.PLATFORMS}} \
            --output type=image \
            --build-arg IMAGE=ubuntu:latest \
            --build-arg LIBC=gnu \
            --file .docker/Dockerfile.publish \
            .
          echo "::endgroup::"
          echo "::group::Building ${TAG}:${VERSION}-alpine Image"
          docker buildx build \
            --tag ${TAG}:${VERSION}-alpine \
            ${PUSH_OPT} ${TAG_OPT} \
            --platform ${{env.PLATFORMS}} \
            --output type=image \
            --build-arg IMAGE=alpine:latest \
            --build-arg LIBC=musl \
            --file .docker/Dockerfile.publish \
            .
          echo "::endgroup::"

